library(FISHprobe)
test = CreateProbeObject(gene_names = c("Lyz1","Lyz2"),specie_type = "mouse",preload_readout = T)
library(devtools)
document("../../fishprobe/")
codebook
codebook_v1 = readRDS("~/Documents/RProjects/readout_probe/codebook/codebook.rds")
codebook_v1$Indice[1:3,]
save(codebook_v1,file = "../data/codebook_v1.rda")
document("../../fishprobe/")
install("../../fishprobe/")
library(FISHprobe)
test = CreateProbeObject(gene_names = c("Lyz1","Lyz2"),specie_type = "mouse",preload_readout = T)
test = TissueExpr(test)
test = SelectTranscript(test)
test = GetSequence(test)
test = ExtractProbes(test,probe_length =  25)
test = StashProbes(test, slot = "Target") # Stash the probe sets
test = FilterProbes(test,filter_names = "GC",min = 0.5,max = 0.6,do.filter = T)
test = GenerateProbes(test)
test
test = GenerateReadout(test,flank_5end ="",concat = "T") # forward and reverse
channel_list = list("488" = Transcripts(test)[1], "561" = Transcripts(test)[2])
test = AssignReadout(test, channel_transcript = channel_list)
test = GenerateFinalProbes(test,concat = "T")
#SaveProbes(test)
test = GenerateReadout(test,flank_5end ="",concat = "T") # forward and reverse
channel_list = list("488" = Transcripts(test)[1], "561" = Transcripts(test)[2])
test = AssignReadout(test, channel_transcript = channel_list)
test = GenerateFinalProbes(test,concat = "T")
SaveProbes(test)
test@codebook$Assignment[1:#,]
test@codebook$Assignment[1:3,]
test@codebook$Assignment$Transcript_ID
match(test@codebook$Assignment$Transcript_ID,test@sequences$ensembl_transcript_id)
match(test@sequences$ensembl_transcript_id,test@codebook$Assignment$Transcript_ID)
test@sequences$ensembl_transcript_id
match(test@codebook$Assignment$Transcript_ID,test@sequences$ensembl_transcript_id)
test@sequences$ensembl_transcript_id[match(test@codebook$Assignment$Transcript_ID,test@sequences$ensembl_transcript_id)]
test@sequences$GeneName[match(test@codebook$Assignment$Transcript_ID,test@sequences$ensembl_transcript_id)]
a = lapply(test@codebook[c("Assignment","Binary","Indice","Sequence")], function(x){
cbind.data.frame(x, Gene = test@sequences$GeneName[match(x[["Transcript_ID"]], test@sequences$ensembl_transcript_id)])
})
head(a$Assignment)
a$Assignment[c(1,160),]
a$Assignment[c(1,161),]
a$Assignment[c(1,162),]
a$Assignment[c(1,161),]
a$Assignment[c(1,161,189),]
a$Binary[c(1,161,189),]
a$Indice[c(1,161,189),]
a$Sequence[c(1,161,189),]
getwd()
document("../../fishprobe/")
install("../../fishprobe/")
library(FISHprobe)
test = CreateProbeObject(gene_names = c("Lyz1","Lyz2"),specie_type = "mouse",preload_readout = T)
test = TissueExpr(test)
test = SelectTranscript(test)
test = GetSequence(test)
test = ExtractProbes(test,probe_length =  25)
test = StashProbes(test, slot = "Target") # Stash the probe sets
test = FilterProbes(test,filter_names = "GC",min = 0.5,max = 0.6,do.filter = T)
test = GenerateProbes(test)
test
test = GenerateReadout(test,flank_5end ="",concat = "T") # forward and reverse
channel_list = list("488" = Transcripts(test)[1], "561" = Transcripts(test)[2])
test = AssignReadout(test, channel_transcript = channel_list)
test = GenerateFinalProbes(test,concat = "T")
SaveProbes(test)
library(FISHprobe)
test = CreateProbeObject(gene_names = c("Lyz1","Lyz2"),specie_type = "mouse",preload_readout = T)
test = TissueExpr(test)
test = SelectTranscript(test)
test = GetSequence(test)
test = ExtractProbes(test,probe_length =  25)
test = StashProbes(test, slot = "Target") # Stash the probe sets
test = FilterProbes(test,filter_names = "GC",min = 0.5,max = 0.6,do.filter = T)
test = GenerateProbes(test)
test
test = GenerateReadout(test, flank_5end ="CCCCCC", flank_3end = "GGGGGG", concat = "TTTT") # adding forward and reverse flank and concatenated nucleotides
channel_list = list("488" = Transcripts(test)[1], "561" = Transcripts(test)[2])
test = AssignReadout(test, channel_transcript = channel_list)
test = GenerateFinalProbes(test,concat = "T")
SaveProbes(test)
test@codebook$Indice[1:3,]
ls()
test@codebook$Indice[c(1,161),]
test@genes
test@transcripts
test@sequences
test
test = CreateProbeObject("XBP1",specie_type = "human")
test
test = TissueExpr(test)
PlotTissueExpr(test)
test
test = SelectTranscript(test,select_best = F)
test
test@transcripts
test = GetSequence(test)
test
test = ExtractProbes(test,probe_length =  25)
test
?SelectTranscript
test@expr.data$XBP1
head(test@expr.data$XBP1)
head(test@expr.data$XBP1$Transcript)
table(test@expr.data$XBP1$Transcript)
test@sequences
test = SelectTranscript(test,select_best = FALSE)
test
test@Target
test@transcripts
SelectTranscript1 <- function(object, genes = NULL, tissue = "All", select_best = TRUE, TPM_min = -Inf, TPM_max = Inf, percent_min = -Inf, percent_max = Inf){
if(is.null(genes)){
genes = object@genes
} else {
if(any(!genes %in% object@genes)) stop(cat("Cannot find gene", genes[which(!genes %in% object@genes)]),call. = FALSE)
genes = intersect(genes,object@genes)
}
if(tissue != "All"){
if(any(! tissue %in% ListTissues(object))) stop(cat("Cannot find tissue", tissue[which(!tissue %in% ListTissues(object))]),call. = FALSE)
}
object@transcripts[["Selected"]] = list()
for(g in genes){
data.temp = object@expr.data[[g]]
data.temp = split(data.temp, data.temp[["Transcript"]])
if("All" %in% tissue){
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "All"
temp[1,3:4] = colMeans(x[,3:4])
return(temp)
})
} else {
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "Selected"
temp[1,3:4] = colMeans(x[which(x[["Tissue"]] %in% unique(tissue)),3:4])
return(temp)
})
}
data.temp = do.call(rbind,data.temp)
data.temp[["Transcript"]] = rownames(data.temp)
if(select_best){
transcript.selected = data.temp[["Transcript"]][which.max(data.temp[,3])]
} else {
transcript.selected = data.temp[["Transcript"]][which((data.temp[,3] < TPM_max & data.temp[,3] > TPM_min) & (data.temp[,4] < percent_max & data.temp[,4] > percent_min))]
print(transcript.selected)
}
object@transcripts[["Selected"]][[g]] = transcript.selected
}
object@param.log[["selectTranscript"]] = list(call = do.call(cbind, mget(names(formals()),sys.frame(sys.nframe()))[-1])
, time = Sys.time())
return(object)
}
test = SelectTranscript1(test,select_best = FALSE)
SelectTranscript1 <- function(object, genes = NULL, tissue = "All", select_best = TRUE, TPM_min = -Inf, TPM_max = Inf, percent_min = -Inf, percent_max = Inf){
if(is.null(genes)){
genes = object@genes
} else {
if(any(!genes %in% object@genes)) stop(cat("Cannot find gene", genes[which(!genes %in% object@genes)]),call. = FALSE)
genes = intersect(genes,object@genes)
}
if(tissue != "All"){
if(any(! tissue %in% ListTissues(object))) stop(cat("Cannot find tissue", tissue[which(!tissue %in% ListTissues(object))]),call. = FALSE)
}
object@transcripts[["Selected"]] = list()
for(g in genes){
data.temp = object@expr.data[[g]]
data.temp = split(data.temp, data.temp[["Transcript"]])
if("All" %in% tissue){
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "All"
temp[1,3:4] = colMeans(x[,3:4])
return(temp)
})
} else {
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "Selected"
temp[1,3:4] = colMeans(x[which(x[["Tissue"]] %in% unique(tissue)),3:4])
return(temp)
})
}
data.temp = do.call(rbind,data.temp)
data.temp[["Transcript"]] = rownames(data.temp)
if(select_best){
transcript.selected = data.temp[["Transcript"]][which.max(data.temp[,3])]
} else {
transcript.selected = data.temp[["Transcript"]][which((data.temp[,3] < TPM_max & data.temp[,3] > TPM_min) & (data.temp[,4] < percent_max & data.temp[,4] > percent_min))]
print(data.temp)
}
object@transcripts[["Selected"]][[g]] = transcript.selected
}
object@param.log[["selectTranscript"]] = list(call = do.call(cbind, mget(names(formals()),sys.frame(sys.nframe()))[-1])
, time = Sys.time())
return(object)
}
test = SelectTranscript1(test,select_best = FALSE)
SelectTranscript1 <- function(object, genes = NULL, tissue = "All", select_best = TRUE, TPM_min = -Inf, TPM_max = Inf, percent_min = -Inf, percent_max = Inf){
if(is.null(genes)){
genes = object@genes
} else {
if(any(!genes %in% object@genes)) stop(cat("Cannot find gene", genes[which(!genes %in% object@genes)]),call. = FALSE)
genes = intersect(genes,object@genes)
}
if(tissue != "All"){
if(any(! tissue %in% ListTissues(object))) stop(cat("Cannot find tissue", tissue[which(!tissue %in% ListTissues(object))]),call. = FALSE)
}
object@transcripts[["Selected"]] = list()
for(g in genes){
data.temp = object@expr.data[[g]]
data.temp = split(data.temp, data.temp[["Transcript"]])
if("All" %in% tissue){
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "All"
temp[1,3:4] = colMeans(x[,3:4])
return(temp)
})
} else {
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "Selected"
temp[1,3:4] = colMeans(x[which(x[["Tissue"]] %in% unique(tissue)),3:4])
return(temp)
})
}
data.temp = do.call(rbind,data.temp)
data.temp[["Transcript"]] = rownames(data.temp)
print(data.temp)
if(select_best){
transcript.selected = data.temp[["Transcript"]][which.max(data.temp[,3])]
} else {
transcript.selected = data.temp[["Transcript"]][which((data.temp[,3] < TPM_max & data.temp[,3] > TPM_min) & (data.temp[,4] < percent_max & data.temp[,4] > percent_min))]
}
object@transcripts[["Selected"]][[g]] = transcript.selected
}
object@param.log[["selectTranscript"]] = list(call = do.call(cbind, mget(names(formals()),sys.frame(sys.nframe()))[-1])
, time = Sys.time())
return(object)
}
test = SelectTranscript1(test,select_best = FALSE)
SelectTranscript1 <- function(object, genes = NULL, tissue = "All", select_best = TRUE, TPM_min = -Inf, TPM_max = Inf, percent_min = -Inf, percent_max = Inf){
if(is.null(genes)){
genes = object@genes
} else {
if(any(!genes %in% object@genes)) stop(cat("Cannot find gene", genes[which(!genes %in% object@genes)]),call. = FALSE)
genes = intersect(genes,object@genes)
}
if(tissue != "All"){
if(any(! tissue %in% ListTissues(object))) stop(cat("Cannot find tissue", tissue[which(!tissue %in% ListTissues(object))]),call. = FALSE)
}
object@transcripts[["Selected"]] = list()
for(g in genes){
data.temp = object@expr.data[[g]]
data.temp = split(data.temp, data.temp[["Transcript"]])
print(data.temp)
if("All" %in% tissue){
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "All"
temp[1,3:4] = colMeans(x[,3:4])
return(temp)
})
} else {
data.temp = lapply(data.temp, function(x){
temp = x[1,]
temp[1,1] = "Selected"
temp[1,3:4] = colMeans(x[which(x[["Tissue"]] %in% unique(tissue)),3:4])
return(temp)
})
}
data.temp = do.call(rbind,data.temp)
data.temp[["Transcript"]] = rownames(data.temp)
if(select_best){
transcript.selected = data.temp[["Transcript"]][which.max(data.temp[,3])]
} else {
transcript.selected = data.temp[["Transcript"]][which((data.temp[,3] < TPM_max & data.temp[,3] > TPM_min) & (data.temp[,4] < percent_max & data.temp[,4] > percent_min))]
}
object@transcripts[["Selected"]][[g]] = transcript.selected
}
object@param.log[["selectTranscript"]] = list(call = do.call(cbind, mget(names(formals()),sys.frame(sys.nframe()))[-1])
, time = Sys.time())
return(object)
}
test = SelectTranscript1(test,select_best = FALSE)
summary(test@expr.data$XBP1$Percent_Expr)
FISHprobe::gtex_pct_human
a = FISHprobe::gtex_pct_human
head(A)
head(a)
class(a)
summary(a)
a = FISHprobe::gtex_mean_human
head(a)
a[,"Cells - Leukemia cell line (CML)"]
table(a[,"Cells - Leukemia cell line (CML)"])
gtex_pct_human = FISHprobe::gtex_pct_human
gtex_pct_human[,"Cells - Leukemia cell line (CML)"]
gtex_pct_human[,"Cells - Leukemia cell line (CML)"] = 0
gtex_pct_human[,"Cells - Leukemia cell line (CML)"]
gtex_pct_human[,"Cells - Leukemia cell line (CML)"]
FISHprobe::gtex_pct_human[,"Cells - Leukemia cell line (CML)"]
save(gtex_pct_human,file = "../data/gtex_pct_human.rda")
document("../../fishprobe/")
install("../../fishprobe/")
test = CreateProbeObject("XBP1","human")
test
test = TissueExpr(test)
test = SelectTranscript(test)
test
test = SelectTranscript(test,select_best = F)
test = GetSequence()
test = GetSequence(test)
test
test@sequences
test@transcripts
test = ExtractProbes(test)
test
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
test
?getSequence
test = GetSequence(test,transcript_ids = c("ENST00000216037"))
test
test = CreateProbeObject("XBP1","human")
test = GetSequence(test,transcript_ids = c("ENST00000216037"))
test = TissueExpr(test)
test = GetSequence(test,transcript_ids = c("ENST00000216037"))
test
test@sequences
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
test
test@sequences
test@sequences$EnsemblNames
test@sequences$ensembl_transcript_id
test = ExtractProbes(test)
test
test@sequences$ensembl_transcript_id
?do.call
document("../../fishprobe/")
install("../../fishprobe/")
rm(gtex_pct_human)
head(gtex_pct_human)
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
test
get_sequences
#get_sequences <- function(transcript_id,mart,genetable,ensembl_table,species = "human",seqtype="cdna"){
install("../../fishprobe/")
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
test
test@sequences
do.call(rbind,1)
do.call(rbind,list(1,2))
list(1,2)
install("../../fishprobe/")
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
dim(test@sequences)
install("../../fishprobe/")
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
test@sequences
dim(test@sequences)
install("../../fishprobe/")
test = GetSequence(test,transcript_ids = c("ENST00000216037", "ENST00000344347", "ENST00000403532"))
test
match("XBP1",test$GeneName)
match(test$GeneName,"XBP1")
?rbind.data.frame
install("../../fishprobe/")
test = CreateProbeObject(test,"XBP1")
test = CreateProbeObject(test,"XBP1",specie_type = "human")
test = CreateProbeObject(test,"XBP1",specie_type = "human")
test = CreateProbeObject(test,gene_names = "XBP1",specie_type = "human")
test = CreateProbeObject(test,gene_names = "XBP1",specie_type = "human")
q()
